// load sprite
let redman = App.loadSpritesheet('redman.png', 48, 64, {
    left: [5, 6, 7, 8, 9],       // defined base anim 
    up: [15, 16, 17, 18, 19],    // defined base anim 
    down: [0, 1, 2, 3, 4],       // defined base anim 
    right: [10, 11, 12, 13, 14], // defined base anim 
}, 8);

// load sprite
let blueman = App.loadSpritesheet('blueman.png', 48, 64, {
    left: [5, 6, 7, 8, 9],
    up: [15, 16, 17, 18, 19],
    down: [0, 1, 2, 3, 4],
    right: [10, 11, 12, 13, 14],
}, 8);

const STATE_INIT = 3000;
const STATE_READY = 3001;
const STATE_PLAYING = 3002;
const STATE_JUDGE = 3004;
const STATE_END = 3005;

//진놀이 맵 설정이 정상적으로 되어있는 지 확인하고, 아닌 경우 에러메세지를 리턴한다. 
function checkSetting(){

	let warningMsg = '';
	if (!Map.hasLocation("red_start_point")) {
		warningMsg = 'red_start_point';
	}
    if (!Map.hasLocation("blue_start_point")) {
		warningMsg = 'blue_start_point';
	}
	if (!Map.hasLocation("blue_prison")) {
		warningMsg = 'blue_prison';
	}
    if (!Map.hasLocation("red_prison")) {
		warningMsg = 'red_prison';
	}
	if (!Map.hasLocation("red_score_zone")) {
		warningMsg = 'red_score_zone';
	}
    if (!Map.hasLocation("blue_score_zone")) {
		warningMsg = 'blue_score_zone';
	}
	return warningMsg; 
}

// load sprite
let red = App.loadSpritesheet('red.png');
let blue = App.loadSpritesheet('blue.png');
let tomb = App.loadSpritesheet('tomb.png');

let _start = false;
let _gameEnd = false;
let _state = STATE_INIT;
let _stateTimer = 0;
let _timer = 120;

let _objects = {};

let _redScore = 0;
let _blueScore = 0;

// for using hash key
let HEIGHT_KEY = 10000000;

let _blueTeam = [];
let _redTeam = [];

let _players = App.players; // App.players : get total players
let TEAM_COUNTER = 0;
let _resultStr = '';

function startState(state)
{
    _state = state;
    _stateTimer = 0;

    switch(_state)
    {
        case STATE_INIT:
            _stateTimer = 0;
            _timer = 120;

            _redScore = 0;
            _blueScore = 0;
            _objects = {};

            for(let i in _players) {
                let p = _players[i];
                 // create and utilize option data using tags.
                p.tag = {
                    x: p.tileX,
                    y: p.tileY,
                    sturn : false,
                    sTime : 1,
                    super : false,
                    team: Math.floor(TEAM_COUNTER % 2),
                };

                TEAM_COUNTER++;

                if(p.tag.team == 0)
                    _redTeam.push(p);
                else if(p.tag.team == 1)
                    _blueTeam.push(p);

                p.sprite = p.tag.team == 0 ? redman : blueman;
                p.sendUpdated();

                //고깔진놀이 앱을 실행한 유저를 확인한다.
				if(p.id == App.creatorID){
					if(p.isMobile)
					//유저의 환경이 모바일인 경우의 위젯 
						p.tag.widget = p.showWidget("setting.html", "bottom", 440, 340);
					else
					//유저의 환경이 pc인 경우의 위젯
						p.tag.widget = p.showWidget("setting.html", "middle", 440, 340);
					
					p.tag.widget.sendMessage({ 
						str_title         : '고깔 뺏기 진놀이',
						str_title_text1   : "고깔을 많이 모으면 이깁니다",
						str_title_text2   : '자기 땅에서 상대와 닿으면 상대를 감옥에 보낼 수 있습니다.\n이 게임은 전용 경기장 맵에서 할 수 있습니다.',
						str_title_start   : "경기 시작",
						str_title_how     : "고깔 뺏기 진놀이 전용맵"
					});
					
					p.tag.widget.onMessage.Add(function (sender, msg) {
						//게임을 취소하는 경우, 나타난 위젯을 제거한다 
						if (msg.type == "cancle") {
							if(p.tag.widget_warning){
								p.tag.widget_warning.destroy();
								p.tag.widget_warning = null;
							}

							if(p.tag.widget){
								p.tag.widget.destroy();
								p.tag.widget = null;
							}
						
						} else {
							// 맵에 필요한 설정 체크							
							let warning = checkSetting();
		
							if(warning !== ''){
								if(p.tag.widget_warning){
									p.tag.widget_warning.destroy();
									p.tag.widget_warning = null;
								}
		
								if(p.isMobile)
									p.tag.widget_warning = App.showWidget("warning.html", "top", 440, 60);
								else 
									p.tag.widget_warning = App.showWidget("warning.html", "bottom", 440, 250);
								
								p.tag.widget_warning.sendMessage({
									str_warningText :  '고깔 뺏기 진놀이는 사전 설정이 필요합니다.(Jinnori needs to be setup)',
                                    str_warningText2 : ' 필요)',
                                    str_warningText3 : '',
									warningMsg: warning,
								})
							} else {
								if(p.tag.widget){
									p.tag.widget.destroy();
									p.tag.widget = null;
								}
								
								startState(STATE_READY);
								_start = true;
							}
						}
					})  
				}
            }
            for(let i in _players) {
                let p = _players[i];
               
                if(p.tag.team == 0)
                p.spawnAtLocation("red_start_point");
                else if(p.tag.team == 1)
                p.spawnAtLocation("blue_start_point");
                p.moveSpeed = 0;
                p.sendUpdated();
            }            
            break;


		

        case STATE_READY:
            for(let i in _players) {
                let p = _players[i];
         
                p.moveSpeed = 10;
                p.sendUpdated();
            }
            break;
        case STATE_PLAYING:
            for(let i in _players) {
                let p = _players[i];
                p.moveSpeed = 120;
                p.sendUpdated();
            }
            break;
        case STATE_JUDGE:
            for(let i in _players) {
                let p = _players[i];
                p.moveSpeed = 0;
                p.sendUpdated();
            }
            break;
        case STATE_END:
            _start = false;

            for(let i in _players) {
                let p = _players[i];
                p.moveSpeed = 80;
                p.title = null;
                p.sprite = null;
                p.sendUpdated();
            }

            // remove all objects created by the zep-scripts
            // 젭스크립트로 생성된 모든 오브젝트를 제거
            Map.clearAllObjects();
            break;
    }
}

App.onStart.Add(function(){
    startState(STATE_INIT);
  
});


// when player join the space event
// 플레이어가 스페이스에 입장 했을 때 이벤트
App.onJoinPlayer.Add(function(p) {
    p.tag = {
        x: p.tileX,
        y: p.tileY,
        sturn : false,
        iTime : 10,  // 감옥에 갇힌 시간 10초로 설정
        super : false,
        team: Math.floor(TEAM_COUNTER % 2),
        inprison : false,
    };

    if(p.tag.team == 0)
        _redTeam.push(p);
    else if(p.tag.team == 1)
        _blueTeam.push(p);

    TEAM_COUNTER++;
    p.nameColor = p.tag.team == 0 ? 16711680 : 255;
    p.sprite = p.tag.team == 0 ? redman : blueman;
 	p.sendUpdated();

    _players = App.players;
});


// when player attacked other player event (z key)
// 플레이어가 다른 플레이어를 공격혔을 때 (Z키)
App.onUnitAttacked.Add(function(sender, x, y, target) {
    if(_state != STATE_PLAYING)
        return;

    // not stun, not invincible, not on the same team
    // 스턴상태가 아니고, 무적이 아니고, 같은 팀이 아니면 스턴을 건다.
    // on the same team movespeed 120, in the other team zone target goes to prison
    // 같은 팀이면 무빙스피드 120, 다른 팀이면 레드팀영역(중앙왼쪽)이면 블루팀이 감옥에 가고 반대면 레드팀이 감옥에 간다.
    if(sender.tag.team == target.tag.team)
    {
        if(target.tag.team == 0){
            target.tag.inprison = false; // 감옥에 갇힘여부 false로 변경
            target.moveSpeed = 120;
            target.spawnAtLocation("red_start_point");
            target.sendUpdated();
        }
        if(target.tag.team == 1){
            target.tag.inprison = false; // 감옥에 갇힘여부 false로 변경
            target.moveSpeed = 120;
            target.spawnAtLocation("blue_start_point");
            target.sendUpdated();
        }
    }
    else if(sender.tag.team !== target.tag.team)
    {   
        if(target.tag.team==0 && target.tileX > 32)
        {
            target.spawnAtLocation("blue_prison");
            target.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
            target.moveSpeed = 0;
            target.sendUpdated();
        }
        else if(target.tag.team==1 && target.tileX < 32)
        {
                  target.spawnAtLocation("red_prison");
                  target.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
                  target.moveSpeed = 0;
                  target.sendUpdated();
        }
        if(sender.tag.team==0 && sender.tileX > 32)
        {
            sender.spawnAtLocation("blue_prison");
            sender.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
            sender.moveSpeed = 0;
            sender.sendUpdated();
        }
        else if(sender.tag.team==1 && sender.tileX < 32)
        {
                  sender.spawnAtLocation("red_prison");
                  sender.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
                  sender.moveSpeed = 0;
                  sender.sendUpdated();
        }
    }
});


// 플레이어끼리 충돌할 때
App.onPlayerTouched.Add(function(sender, target, x, y) {
    if(_state != STATE_PLAYING)
        return;

    // on the same team movespeed 120, in the other team zone target goes to prison
    // 같은 팀이면 무빙스피드 120, 다른 팀이면 레드팀영역(중앙왼쪽)이면 블루팀이 감옥에 가고 반대면 레드팀이 감옥에 간다.
    if(sender.tag.team == target.tag.team)
    {
        if(target.tag.team == 0){
            target.tag.inprison = false; // 감옥에 갇힘여부 false로 변경
            target.moveSpeed = 120;
            target.spawnAtLocation("red_start_point");
            target.sendUpdated();
        }
        if(target.tag.team == 1){
            target.tag.inprison = false; // 감옥에 갇힘여부 false로 변경
            target.moveSpeed = 120;
            target.spawnAtLocation("blue_start_point");
            target.sendUpdated();
        }
    }
    else if(sender.tag.team !== target.tag.team)
    {   
        if(target.tag.team==0 && target.tileX > 32)
        {
            target.spawnAtLocation("blue_prison");
            target.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
            target.moveSpeed = 0;
            target.sendUpdated();
        }
        else if(target.tag.team==1 && target.tileX < 32)
        {
                  target.spawnAtLocation("red_prison");
                  target.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
                  target.moveSpeed = 0;
                  target.sendUpdated();
        }
        if(sender.tag.team==0 && sender.tileX > 32)
        {
            sender.spawnAtLocation("blue_prison");
            sender.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
            sender.moveSpeed = 0;
            sender.sendUpdated();
        }
        else if(sender.tag.team==1 && sender.tileX < 32)
        {
                  sender.spawnAtLocation("red_prison");
                  sender.tag.inprison = true; // 감옥에 갇힘여부 true로 변경
                  sender.moveSpeed = 0;
                  sender.sendUpdated();
        }
    }
});


// update score : player located at score_zone                               
App.addOnLocationTouched("red_score_zone", function(p){
    if(p.tag.team == 0)
    {
        _redScore ++;
        p.spawnAtLocation("red_start_point");
        p.sendUpdated();
    }
});
                    
App.addOnLocationTouched("blue_score_zone", function(p){
    if(p.tag.team == 1)
    {
        _blueScore ++;
        p.spawnAtLocation("blue_start_point");
        p.sendUpdated();
    }
});

// when player leave the space event
// 플레이어가 스페이스를 나갔을 때 이벤트
App.onLeavePlayer.Add(function(p) {
    p.moveSpeed = 80;
    p.title = null;
    p.sprite = null;
    p.sendUpdated();

    _players = App.players; // update all plyers for update(dt)
});

// when player touched objects event
// 플레이어가 오브젝트와 부딪혔을 때 
App.onDestroy.Add(function() {
    Map.clearAllObjects();
})

// called every 20ms
// 20ms 마다 호출되는 업데이트
// param1 : deltatime ( elapsedTime )
App.onUpdate.Add(function(dt) {
	
    for(let i in _players) {
        let p = _players[i];
        // 감옥에 갇힘 여부가 true 이면
        if(p.tag.inprison)
        {
            p.tag.iTime -= dt; // 감옥에 갇힘 지속시간이 0이 될 때까지 update마다 dt만큼 빼줌
            if(p.tag.iTime <= 0) // 감옥에 갇힘 지속시간이 0 이하가 되면,
            {
                p.tag.inprison = false; // 감옥에 갇힘 여부를 false로 변경
                p.tag.iTime = 10; // 갇힘시간 10초로 초기화
                p.moveSpeed = 120; // 이동속도 정상화
                p.title = p.tag.inprison;
                p.sendUpdated();
            }
        }
    }


     if(!_start)
        return;

    _stateTimer += dt;

    switch(_state)
    {
        case STATE_INIT:
            App.showCenterLabel("고깔을 많이 모으는 편이 승리합니다.\n자기땅에서 상대편과 닿으면 상대를 감옥에 보낼 수 있습니다.\n같은편과 닿으면 감옥에서 풀려납니다.");
            
            if(_stateTimer >= 7)
            {
                startState(STATE_READY);
            }
            break;
        case STATE_READY:
            App.showCenterLabel("경기가 곧 시작됩니다.");
            if(_stateTimer >= 3)
            {
                startState(STATE_PLAYING);
            }
            break;
        case STATE_PLAYING:
            App.showCenterLabel(_timer +  `\nRED TEAM  VS  BLUE TEAM\n` + _redScore + "  VS  " + _blueScore);
            if(_stateTimer >= 1) {
                _stateTimer = 0;
                _timer--;
            }
      

            // time over
            if(_timer <= 0)
            {
                if(_redScore > _blueScore)
                {
                    for(let i in _players) {
                        let p = _players[i];
                        p.title = null;
                        if(p.tag.team == 1)
                        {
                            p.sprite = tomb;
                            p.moveSpeed = 0;
                            p.sendUpdated();
                        }
                    }
                    _resultStr = 'RED TEAM  VS  BLUE TEAM\n' + _redScore + "  VS  " + _blueScore + '\nRED TEAM WIN';
                }
                else if(_redScore < _blueScore)
                {
                    for(let i in _players) {
                        let p = _players[i];
                        p.title = null;
                        if(p.tag.team == 0)
                        {
                            p.sprite = tomb;
                            p.moveSpeed = 0;
                            p.sendUpdated();
                        }
                        _resultStr = 'RED TEAM  VS  BLUE TEAM\n' + _redScore + "  VS  " + _blueScore + '\nBLUE TEAM WIN';
                    }
                }
                else
                {
                    for(let i in _players) {
                        let p = _players[i];
                        p.title = null;
                        p.sprite = null;
                        p.sendUpdated();
                    }  
                    _resultStr = 'RED TEAM  VS  BLUE TEAM\n' + _redScore + "  VS  " + _blueScore + '\nDRAW';
                }
                startState(STATE_JUDGE);
            }
            else
            {
                for(let i in _players) {
                    let p = _players[i];
                    
                   
                    // strun state check
                    if(p.tag.sturn)
                    {
                        p.tag.sTime -= dt;
                        if(p.tag.sTime <= 0)
                        {
                            p.tag.sturn = false;
                            p.tag.super = true;
                            p.tag.sTime = 1;
                            p.moveSpeed = 80;
                            p.sendUpdated();
                        }
                    }

                    // invincible state check
                    if(p.tag.super)
                    {
                        p.tag.sTime -= dt;
                        if(p.tag.sTime <= 0)
                        {
                            p.tag.super = false;
                            p.tag.sTime = 1;
                            p.sendUpdated();
                        }
                    }                   
                    
                }
            }
            break;
        case STATE_JUDGE:
            App.showCenterLabel(_resultStr);

            if(_stateTimer >= 5)
            {
                startState(STATE_END);
            }
            break;
        case STATE_END:
            break;
    }
});
